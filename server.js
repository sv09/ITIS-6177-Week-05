const express = require('express');
const bodyParser = require('body-parser');
const app = express();
const port = 3000;

const mariadb = require('mariadb');
const pool = mariadb.createPool({
	host: 'localhost',
	user: 'root',
	password: 'root',
	database: 'sample',
	port: 3306,
	connectionLimit: 5
});

const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');
const cors = require('cors');

const options = {
    swaggerDefinition:{
        info:{
            title: 'ITIS 6177 REST API and Swagger',
            version: '1.0.0',
            description: 'ITIS-6177-Week-05 API autogenerated by Swagger'
        },
        host: '206.189.204.93:3000',
        basePath: '/',
    },
    apis: ['./server.js'],
};

const specs = swaggerJsdoc(options);

app.use('/docs', swaggerUi.serve, swaggerUi.setup(specs));
app.use(cors());

app.use(bodyParser.json());
//var jsonParser = bodyParser.json();

app.get('/', (req, res) => {
	res.send('Home Page');
});

app.get('/api/agents', async function (req, res){
	let conn;
	try{
		conn = await pool.getConnection();
		//console.log('connection established');
		rows = await conn.query("SELECT * FROM agents;");
		//console.log('got all the rows');
		//console.log(rows);
		res.setHeader('cache-control', ['max-age=4','public'])
		res.json(rows);
	}catch(err){
		throw err;
	}finally{
		if(conn) return conn.release();
	}
});

app.get('/api/customers', async function(req, res){
	let conn;
	try{
		conn = await pool.getConnection();
		rows = await conn.query("SELECT * FROM customer;");
		res.setHeader('cache-control', ['max-age=4','public'])
		res.json(rows);
	}catch(err){
		throw err;
	}finally{
		if(conn) return conn.release();
	}
});

/**
 * @swagger
 * /api/company:
 *    get:
 *      description: Return all company details
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Array of objects of companies
 */
app.get('/api/company', async function(req, res){
        let conn;
        try{
                conn = await pool.getConnection();
                rows = await conn.query("SELECT * FROM company;");
		res.setHeader('cache-control', ['max-age=4','public'])
                res.json(rows);
        }catch(err){
                throw err;
        }finally{
                if(conn) return conn.release();
        }
});

app.get('/api/company/:COMPANY_ID', async function(req, res){
	let conn;
	//console.log(req.params);
	try{
		conn = await pool.getConnection();
		row = await conn.query("SELECT * FROM company WHERE COMPANY_ID = ?;",req.params.COMPANY_ID)
		//console.log(row);
		res.setHeader('cache-control', ['max-age=4','public'])
		res.json(row);
	}catch(err){
		throw err;
	}finally{
		if(conn) return conn.release();
	}
});

app.get('/api/daysorder', async function(req, res){
        let conn;
        try{
                conn = await pool.getConnection();
                rows = await conn.query("SELECT * FROM daysorder;");
		res.setHeader('cache-control', ['max-age=4','public'])
                res.json(rows);
        }catch(err){
                throw err;
        }finally{
                if(conn) return conn.release();
        }
});


app.delete('/api/company/:COMPANY_ID', async function(req, res){
        let conn;

        try{
                conn = await pool.getConnection();
                row = await conn.query("DELETE FROM company WHERE COMPANY_ID = ?;",req.params.COMPANY_ID)
                res.setHeader('cache-control', ['max-age=4','public'])
                res.json(row);
        }catch(err){
                throw err;
        }finally{
                if(conn) return conn.release();
        }
});

/**
 * @swagger
 * /api/company:
 *    post:
 *      description: Post a new company to db
 *      consumes:
 *          - application/json
 *      parameters:
 *          - in: body
 *            name: Company
 *            decsription: Company to be inserted
 *            schema:
 *              type: object
 *              properties:
 *                  COMPANY_ID:
 *                      type: string
 *                  COMPANY_NAME:
 *                      type: string
 *                  COMPANY_CITY:
 *                      type: string  
 *      responses:
 *          201:
 *              description: Object of companies
 */
app.post('/api/company',  async function(req, res){
	console.log('req.body = ', req.body);
	let conn;
	try{
        	conn = await pool.getConnection();
        	let COMPANY_ID = req.body.COMPANY_ID;
        	let COMPANY_NAME = req.body.COMPANY_NAME;
        	let COMPANY_CITY = req.body.COMPANY_CITY;
        	post = await conn.query("INSERT INTO company VALUES (?, ?, ?)",[COMPANY_ID, COMPANY_NAME, COMPANY_CITY]);
        	res.json(post);
	}catch(err){
		throw err;
	 }finally{
		if(conn) return conn.release();
	 }
});

app.put('/api/:id', async function(req, res){
	let conn;
	try{
		conn = await pool.getConnection();
		//let sql = "SELECT EXISTS
		let check = await conn.query(checkSQL, [req.params.id]);
		if(check == req.params.id){
			console.log(check);
		}else{
			console.log(check);
		}
	}catch(err){
		throw err;
	}finally{
		if(conn) return conn.release();
	}
});

app.patch('/api/company/:id', async function(req, res){
	let conn;
	let upd;
	//console.log('req.body = ', req.body);
	//console.log('req.params = ', req.params);
	try{
		conn = await pool.getConnection();
		/*if(req.body){
			let sql = "UPDATE company SET ? WHERE COMPANY_ID = ?";
                        let val = [req.body, req.params.id];
                        upd = await conn.query(sql, val);
		}*/
		if(req.body && req.body.COMPANY_NAME && req.body.COMPANY_CITY){
			let sql = "UPDATE company SET COMPANY_NAME = ?, COMPANY_CITY = ?  WHERE COMPANY_ID = ?";
			let val = [req.body.COMPANY_NAME, req.body.COMPANY_CITY, req.params.id];
			upd = await conn.query(sql, val);
		}else if(req.body && req.body.COMPANY_ID && req.body.COMPANY_CITY){
			let sql = "UPDATE company SET COMPANY_ID = ?, COMPANY_CITY = ?  WHERE COMPANY_ID = ?";
                        let val = [req.body.COMPANY_ID, req.body.COMPANY_CITY, req.params.id];
                        upd = await conn.query(sql, val);
		}else if(req.body && req.body.COMPANY_ID && req.body.COMPANY_NAME){
                        let sql = "UPDATE company SET COMPANY_ID = ?, COMPANY_NAME = ?  WHERE COMPANY_ID = ?";
                        let val = [req.body.COMPANY_ID, req.body.COMPANY_NAME, req.params.id];
                        upd = await conn.query(sql, val);
                }else if(req.body && req.body.COMPANY_ID && req.body.COMPANY_NAME &&  req.body.COMPANY_CITY){
                        let sql = "UPDATE company SET COMPANY_ID = ?, COMPANY_NAME = ?, COMPANY_CITY = ?  WHERE COMPANY_ID = ?";
                        let val = [req.body.COMPANY_ID, req.body.COMPANY_NAME, req.body.COMPANY_CITY, req.params.id];
                        upd = await conn.query(sql, val);
                }else if(req.body && req.body.COMPANY_ID){
                        let sql = "UPDATE company SET COMPANY_ID = ?  WHERE COMPANY_ID = ?";
                        let val = [req.body.COMPANY_ID, req.params.id];
                        upd = await conn.query(sql, val);
                }else if(req.body && req.body.COMPANY_NAME){
                        let sql = "UPDATE company SET COMPANY_NAME = ?  WHERE COMPANY_ID = ?";
                        let val = [req.body.COMPANY_NAME, req.params.id];
                        upd = await conn.query(sql, val);
                }else if(req.body && req.body.COMPANY_CITY){
                        let sql = "UPDATE company SET COMPANY_CITY = ?  WHERE COMPANY_ID = ?";
                        let val = [req.body.COMPANY_CITY, req.params.id];
                        upd = await conn.query(sql, val);
                }
		res.json(upd);		
	}catch(err){
		throw err;
	}finally{
		if(conn) return conn.release();
	}
});

app.listen(port, () => {
	console.log(`app listening at http://localhost:${port}`)
});
